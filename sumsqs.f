C UPPER = UPPER BOUND, UPSQRT = INTEGER SQUARE ROOT OF UPPER BOUND,
C NUMSQ = MAX NUMBER OF SQUARES TO BE SUMMED
      SUBROUTINE SUMSQS(UPPER, UPSQRT, NUMSQ)
      INTEGER UPPER, UPSQRT, SQURES(UPSQRT), I, SOLUTN(NUMSQ), NUSED, SQUARE, CUBE
      LOGICAL AICONS
      CALL POPSQU(SQURES, UPSQRT)
C SQURES NOW CONTAINS ALL SQUARE NUMBERS BETWEEN 1 AND THE UPPER 
C BOUND OF THE PROBLEM
      DO 10 I=1,UPPER
      CALL AIZERO(SOLUTN, NUMSQ)
      NUSED = 0
      CALL CBMFS(I, SQURES, UPSQRT, NUMSQ, SOLUTN, NUSED)
      IF (NUSED .EQ. 0) GOTO 10
      IF (NUSED .EQ. 1) GOTO 1
      IF (NUSED .EQ. 2) GOTO 2
      IF (NUSED .EQ. 3) GOTO 3
      IF (NUSED .EQ. 4) GOTO 4
1     PRINT *, I, "=", SQURES(SOLUTN(1))
      GOTO 10
2     PRINT *, I, "=", SQURES(SOLUTN(1)),
     1 "+", SQURES(SOLUTN(2))
      GOTO 10
3     PRINT *, I, "=", SQURES(SOLUTN(1)),
     1"+", SQURES(SOLUTN(2)),
     2"+", SQURES(SOLUTN(3))
      GOTO 10
4     PRINT *, I, "=", SQURES(SOLUTN(1)),
     1"+", SQURES(SOLUTN(2)),
     2"+", SQURES(SOLUTN(3)),
     3"+", SQURES(SOLUTN(4))
10    CONTINUE
      END


C CAN BE MADE FROM SQUARES. TARGET IS THE NUMBER TO MAKE, SQURES IS
C AN ARRAY OF ALL USABLE SQUARE NUMBERS, WHICH HAS LENGTH UPSQRT, 
C AND NUMSQ IS THE MAXIMUM NUMBER OF SQUARES TO USE. SOLUTN HOLDS 
C THE SQUARES FOUND, AND NUSED IS HOW MANY WERE USED.
      SUBROUTINE CBMFS(TARGET, SQURES, UPSQRT, NUMSQ, SOLUTN, NUSED)
      INTEGER TARGET, SQURES(*), UPSQRT, NUMSQ, SOLUTN(*), NUSED
C I = INDEX USED WHILE SUMMING SQUARES
      INTEGER I
C CURSUM = SUM OF CURRENT COMBINATION OF SQUARES
C FLAG TO SAY IF ENUMERATION HAS FINISHED
      LOGICAL ISDONE
      ISDONE = .FALSE.
100   CALL ICTNS(SOLUTN, NUMSQ, UPSQRT, NUSED, ISDONE)
      IF (ISDONE) GOTO 190
      CURSUM = 0
      DO 150 I=1,NUSED
      CURSUM = CURSUM + SQURES(SOLUTN(I))
150   CONTINUE
      IF (CURSUM .EQ. TARGET) GOTO 200
      GOTO 100
190   NUSED = 0
200   END
